//------------- WinExecAndWait32 함수 적용 ---------------
function WinExecAndWait32(FileName: string; Visibility: Integer): integer;
var
  zAppName: array[0..512] of Char;
  zCurDir: array[0..255] of Char;
  WorkDir: string;
  StartupInfo: TStartupInfo;
  ProcessInfo: TProcessInformation;
  R: Cardinal;
begin
  StrPCopy(zAppName, FileName);
  GetDir(0, WorkDir);
  StrPCopy(zCurDir, WorkDir);
  FillChar(StartupInfo, Sizeof(StartupInfo), #0);
  StartupInfo.cb := Sizeof(StartupInfo);


  StartupInfo.dwFlags := STARTF_USESHOWWINDOW;
  StartupInfo.wShowWindow := Visibility;

  if not CreateProcess(nil,
           zAppName, { pointer to command line string }
           nil, { pointer to process security attributes }
           nil, { pointer to thread security attributes }
           false, { handle inheritance flag }
           CREATE_NEW_CONSOLE or { creation flags }
           NORMAL_PRIORITY_CLASS,
           nil, { pointer to new environment block }
           nil, { pointer to current directory name }
           StartupInfo, { pointer to STARTUPINFO }
           ProcessInfo) then
  begin
    Result := -1; { pointer to PROCESS_INF }
  end else begin
    WaitforSingleObject(ProcessInfo.hProcess, INFINITE);
    GetExitCodeProcess(ProcessInfo.hProcess, R);
    CloseHandle(ProcessInfo.hProcess);
    CloseHandle(ProcessInfo.hThread);
  end;
end;

//--------------- String Truncation Function -----------------------
// 2 functions are along with
function MakeFinalTruncString(ARefStr, ASubStr : String; ACanvas : TCanvas; ACanvasWidth : Integer) : String;
var
  idx, StrWidth : integer;
  SubSubStr : string;
begin
  result := '';

  if ARefStr = ASubStr then begin
    Result := ASubStr;
  end else begin
    for idx := Length(ASubStr) downto 1 do
    begin
      SubSubStr := Copy(ASubStr, 0, idx);
      SubSubStr := SubSubStr + '...';
      StrWidth := ACanvas.TextWidth(SubSubStr);
      if StrWidth <  ACanvasWidth then
      begin
        Result := SubSubStr;
        exit;
      end;
    end;
  end;
end;

function TruncateString(ARefStr : String; ACanvas : TCanvas; ACanvasWidth : Integer; AFirstIdx, ALastIdx : Integer) : String;
var
  StrWidth, StrCount, NewFirstIdx, NewLastIdx : integer;
  SubStr : String;
begin
  StrCount := ALastIdx + 1;
  SubStr := Copy(ARefStr, 1, StrCount);
  StrWidth := ACanvas.TextWidth(SubStr);

  if (AFirstIdx >= ALastIdx) then  begin
    Result := MakeFinalTruncString(ARefStr, SubStr, ACanvas, ACanvasWidth);
  end else if StrWidth = ACanvasWidth then begin
    Result := MakeFinalTruncString(ARefStr, SubStr, ACanvas, ACanvasWidth);
  end else if StrWidth > ACanvasWidth then begin
    NewLastIdx := (AFirstIdx + ALastIdx) div 2;
    Result := TruncateString(ARefStr, ACanvas, ACanvasWidth, AFirstIdx, NewLastIdx);
  end else begin
    NewFirstIdx := ALastIdx;
    NewLastIdx := ALastIdx + ((ALastIdx - AFirstIdx) div 2);
    Result := TruncateString(ARefStr, ACanvas, ACanvasWidth, NewFirstIdx, NewLastIdx);
  end;
end;

// Exmaple
//procedure TForm68.FormPaint(Sender: TObject);
//var
//  TruncStr : string;
//  ClientRect : TRect;
//begin
//  ClientRect := GetClientRect;
//  TruncStr := TruncateString(Edit1.Text, Canvas, ClientRect.Width, 1, Length(Edit1.Text));
//  Canvas.TextOut(0,0, TruncStr);
//en
